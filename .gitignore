import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Constants for conversation states
CHOOSING, TYPING_REPLY = range(2)

# Initialize product catalog
product_catalog = {
    "Realme 11 Pro+ 5G": {"price": 29990},
    "Realme 10 Pro+ 5G": {"price": 27990}
}

# Initialize user data
user_data = {
    "cart": [],
    "shipping_info": "",
}

# Define a function to display the product catalog
def display_catalog(update: Update, context: CallbackContext):
    catalog_text = "Product Catalog:\n"
    for product, details in product_catalog.items():
        catalog_text += f"{product}\nPrice: {details['price']} INR\n\n"
    update.message.reply_text(catalog_text)

# Define a function to add items to the user's cart
def add_to_cart(update: Update, context: CallbackContext):
    user_message = update.message.text
    product = user_message.strip()
    if product in product_catalog:
        user_data["cart"].append(product)
        update.message.reply_text(f"{product} added to your cart.")
    else:
        update.message.reply_text("Product not found in the catalog. Please check the product name.")

# Define a function to view the user's cart
def view_cart(update: Update, context: CallbackContext):
    cart_items = user_data.get("cart", [])
    if cart_items:
        cart_text = "Your Cart:\n"
        for item in cart_items:
            cart_text += f"{item}\n"
        update.message.reply_text(cart_text)
    else:
        update.message.reply_text("Your cart is empty.")

# Define a function to start the order placement process
def start_order(update: Update, context: CallbackContext):
    update.message.reply_text("To place an order, please provide your shipping information.")
    return TYPING_REPLY

# Define a function to process the shipping information and place the order
def process_order(update: Update, context: CallbackContext):
    user_data["shipping_info"] = update.message.text
    # Implement logic to place the order, calculate total, and provide an order confirmation.
    order_confirmation = "Order Confirmation:\n"
    for item in user_data["cart"]:
        order_confirmation += f"{item}\n"
    order_confirmation += f"Shipping Info: {user_data['shipping_info']}"
    update.message.reply_text(order_confirmation)
    # Clear the cart and shipping info
    user_data["cart"] = []
    user_data["shipping_info"] = ""
    return ConversationHandler.END

# Create a ConversationHandler to manage user interactions
conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("checkout", start_order)],
    states={
        TYPING_REPLY: [MessageHandler(Filters.text & ~Filters.command, process_order)],
    },
    fallbacks=[],
)

# Create an Updater and add handlers
updater = Updater(token="6753034161:AAHpRjksyz6W8c9vUUlGlVQMJjhKdncy8O4", use_context=True)
dispatcher = updater.dispatcher
dispatcher.add_handler(CommandHandler("start", display_catalog))
dispatcher.add_handler(CommandHandler("addtocart", add_to_cart))
dispatcher.add_handler(CommandHandler("viewcart", view_cart))
dispatcher.add_handler(conversation_handler)

# Start the bot
updater.start_polling()
updater.idle()
